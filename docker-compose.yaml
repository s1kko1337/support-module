services:
  php-fpm:
    build:
      context: .
      dockerfile: ./docker/dockerfile
      target: fpm
    container_name: php-fpm
    volumes:
      - ./:/var/www/html
      - vendor-volume:/var/www/html/vendor
    networks:
      - app-network

  php-cli:
    build:
      context: .
      dockerfile: ./docker/dockerfile
      target: cli
    container_name: php-cli
    volumes:
      - ./:/app
    command: /bin/sh -c "rm -rf vendor/ && composer install && php artisan config:clear && php artisan cache:clear"
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: ./docker/dockerfile
      target: nginx
    container_name: nginx
    ports:
      - ${APP_WEB_PORT}:80
      - "443:443"
      - "6001:6001"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/certs:/etc/nginx/certs
    depends_on:
      - nodejs
    env_file:
      - path: .env
    environment:
      - NGINX_CACHE_CONTROL="no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0"
    networks:
      - app-network

  nodejs:
    build:
      context: .
      dockerfile: ./docker/dockerfile
      target: nodejs
    container_name: nodejs
    ports:
      - "5173:5173"
    volumes:
      - ./:/app
    command: /bin/sh -c "npm install && npm run dev"
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - pgsql:/var/lib/postgresql/data/pgdata
    env_file:
      - path: .env
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=utf8 --lc-collate=C --lc-ctype=C
      - POSTGRES_DB=${DB_DATABASE}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 54321:5432
    networks:
      - app-network


volumes:
  pgsql:
  vendor-volume:

networks:
  app-network:
    driver: bridge
